/*
	GamePhysics.h
	Blaze Game Engine 0.01

	Created by Ned Bingham on 1/17/06.
  	Copyright 2006 Sol Union. All rights reserved.

    Blaze Game Engine 0.01 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Blaze Game Engine 0.01 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Blaze Game Engine 0.01.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Main.h"
#include "GameModel.h"

#ifndef GamePhysics_h
#define GamePhysics_h

#define Front 0
#define Back  1
#define On    2
#define Span  3

#define MaxPolysInNode 40

struct BSPNode
{
	CTriangle Splitter;
	
	CTriangle *Data;
	bool leaf;
	BSPNode *FrontList;
	BSPNode *BackList;
};

int ClassifyPoint(Vector Point, CTriangle Splitter);
int ClassifyTriangle(CTriangle *Face, CTriangle Splitter);

void BuildBSPTree(BSPNode *Node, CTriangle *Data, Vector Min, Vector Max, int NumTris, int splitterValue);
void DestroyBSPTree(BSPNode *Node, bool starter);

void AddShapes(Vector *P1, int P1Num, Vector *P2, int P2Num, Vector *Output, int *NumOutput);

GLfloat getmax(Vector *points, int NumPoints, Vector axis);
bool isect(Vector *P1, int PNum1, Vector *P2, int PNum2, Vector axis);
bool isectboxtri(Vector BoxPoints[8], CTriangle tri);
bool isectboxtri2(Vector BoxPoints[8], CTriangle tri, Vector Velocity);

MeshData FindNode(BSPNode *Node, Vector Point);

void SplitTriangle(CTriangle SplitPlane, CTriangle DataPlane, CTriangle *SplitTris, int *NumTris);

struct GamePhysics
{
	GamePhysics();
	
	MeshData *Map;
	
	BSPNode NodeList;
	
	Model *ModelList;
	
	void AddModel(Model *Object);
	void DeleteModel();
	void GetMap(MeshData *MapData);
	
	void DetectCollision();
};

#endif
